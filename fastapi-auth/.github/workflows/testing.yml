name: Automated Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: voicepartnerai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Set up environment variables
      run: |
        echo "TESTING=true" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://testuser:testpassword@localhost:5432/voicepartnerai_test" >> $GITHUB_ENV
        echo "SECRET_KEY=test_secret_key_for_ci_only" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=test_openai_key" >> $GITHUB_ENV
        echo "TWILIO_ACCOUNT_SID=test_twilio_sid" >> $GITHUB_ENV
        echo "TWILIO_AUTH_TOKEN=test_twilio_token" >> $GITHUB_ENV
        echo "STRIPE_SECRET_KEY=test_stripe_key" >> $GITHUB_ENV
        echo "ELEVENLABS_API_KEY=test_elevenlabs_key" >> $GITHUB_ENV
    
    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U testuser; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
    
    - name: Run database migrations
      run: |
        python -c "
        from database import engine, Base
        Base.metadata.create_all(bind=engine)
        print('Database tables created successfully')
        "
    
    - name: Run linting with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run type checking with mypy
      continue-on-error: true  # Don't fail the build on type errors for now
      run: |
        pip install mypy
        mypy . --ignore-missing-imports --no-strict-optional
    
    - name: Run security linting with bandit
      continue-on-error: true  # Don't fail the build on security warnings for now
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Run tests with pytest
      run: |
        pytest -v --tb=short --cov=. --cov-report=html:htmlcov --cov-report=xml --cov-fail-under=70
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --tb=short
    
    - name: Test API endpoints health
      run: |
        # Start the FastAPI server in background
        python -m uvicorn main_with_error_handling:app --host 0.0.0.0 --port 8000 &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Test health endpoints
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/docs || exit 1
        
        # Stop the server
        kill $SERVER_PID
    
    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
          bandit-report.json
          pytest-report.html
        retention-days: 30
    
    - name: Archive logs
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: logs-${{ matrix.python-version }}
        path: |
          *.log
          tests/*.log
        retention-days: 7

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: docker build and push, kubectl apply, etc.
    
    - name: Run smoke tests on staging
      run: |
        echo "Running smoke tests on staging..."
        # Add staging smoke tests here
        # Example: curl health checks, basic API tests

  deploy-production:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: docker build and push, kubectl apply, etc.
    
    - name: Run smoke tests on production
      run: |
        echo "Running smoke tests on production..."
        # Add production smoke tests here
        # Example: curl health checks, basic API tests
    
    - name: Notify team of deployment
      if: success()
      run: |
        echo "Production deployment successful!"
        # Add notification logic here (Slack, email, etc.)

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety
    
    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload safety report
      uses: actions/upload-artifact@v3
      with:
        name: safety-report
        path: safety-report.json
        retention-days: 30