"""
PHASE 6: Deployment & Betrieb - Infrastructure as Code
Production-ready Docker Compose Setup with all services
"""

version: '3.8'

services:
  # ============================================================================
  # VoicePartnerAI Production API
  # ============================================================================
  voicepartner-api:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: voicepartner-api
    restart: unless-stopped
    ports:
      - "8005:8005"
    environment:
      # API Configuration
      - ENVIRONMENT=production
      - DEBUG=false
      - HOST=0.0.0.0
      - PORT=8005
      
      # Redis Configuration
      - REDIS_URL=redis://redis:6379
      
      # Provider API Keys (from .env file)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - DEEPGRAM_API_KEY=${DEEPGRAM_API_KEY}
      
      # Security Configuration
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      
      # Monitoring Configuration
      - MONITORING_ENABLED=true
      - ALERT_EMAIL_ENABLED=${ALERT_EMAIL_ENABLED}
      - ALERT_EMAIL_FROM=${ALERT_EMAIL_FROM}
      - ALERT_EMAIL_TO=${ALERT_EMAIL_TO}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      
      # Database Paths (mounted volumes)
      - DATABASE_PATH=/app/data
      
    volumes:
      # Persistent data storage
      - ./data:/app/data
      - ./logs:/app/logs
      
    depends_on:
      - redis
      - prometheus
      - grafana
      
    networks:
      - voicepartner-network
      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # Redis Cache & Session Store
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: voicepartner-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - voicepartner-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # Reverse Proxy & Load Balancer
  # ============================================================================
  nginx:
    image: nginx:alpine
    container_name: voicepartner-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./static:/var/www/static
    depends_on:
      - voicepartner-api
    networks:
      - voicepartner-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # Monitoring Stack
  # ============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: voicepartner-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - voicepartner-network

  grafana:
    image: grafana/grafana:latest
    container_name: voicepartner-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ALLOW_EMBEDDING=true
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - voicepartner-network
    depends_on:
      - prometheus

  # ============================================================================
  # Centralized Logging
  # ============================================================================
  elasticsearch:
    image: elasticsearch:8.8.0
    container_name: voicepartner-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - voicepartner-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  kibana:
    image: kibana:8.8.0
    container_name: voicepartner-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - voicepartner-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  logstash:
    image: logstash:8.8.0
    container_name: voicepartner-logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./logs:/usr/share/logstash/logs
    environment:
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch
    networks:
      - voicepartner-network

  # ============================================================================
  # Database Backup Service
  # ============================================================================
  backup:
    image: alpine:latest
    container_name: voicepartner-backup
    restart: unless-stopped
    volumes:
      - ./data:/data
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    command: >
      sh -c "
        apk add --no-cache dcron &&
        echo '0 2 * * * /backup.sh' | crontab - &&
        crond -f -l 2
      "
    networks:
      - voicepartner-network

  # ============================================================================
  # SSL Certificate Management
  # ============================================================================
  certbot:
    image: certbot/certbot
    container_name: voicepartner-certbot
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - ./nginx/webroot:/var/www/certbot
    command: >
      sh -c "
        while :; do
          sleep 12h & wait $$!;
          certbot renew;
        done
      "
    networks:
      - voicepartner-network

# ============================================================================
# NETWORKS & VOLUMES
# ============================================================================
networks:
  voicepartner-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local