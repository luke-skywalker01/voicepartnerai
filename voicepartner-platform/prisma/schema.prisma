// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users & Authentication
model User {
  id              String    @id @default(cuid())
  email           String    @unique
  passwordHash    String    @map("password_hash")
  tenantId        String    @map("tenant_id")
  subscriptionTier String   @default("starter") @map("subscription_tier")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  tenant          Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  workflows       Workflow[]
  executions      WorkflowExecution[]
  providerKeys    ProviderKey[]

  @@map("users")
}

// Tenant Isolation
model Tenant {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  settings  Json     @default("{}")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  users            User[]
  workflows        Workflow[]
  executions       WorkflowExecution[]
  providerKeys     ProviderKey[]

  @@map("tenants")
}

// Workflows (Tenant-Isolated)
model Workflow {
  id           String   @id @default(cuid())
  tenantId     String   @map("tenant_id")
  userId       String   @map("user_id")
  name         String
  description  String?
  workflowData Json     @map("workflow_data")
  status       String   @default("draft")
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  tenant      Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  executions  WorkflowExecution[]

  @@map("workflows")
}

// Workflow Executions (Analytics)
model WorkflowExecution {
  id            String    @id @default(cuid())
  tenantId      String    @map("tenant_id")
  workflowId    String    @map("workflow_id")
  userId        String    @map("user_id")
  executionData Json?     @map("execution_data")
  status        String    @default("running")
  startedAt     DateTime  @default(now()) @map("started_at")
  completedAt   DateTime? @map("completed_at")
  durationMs    Int?      @map("duration_ms")
  errorMessage  String?   @map("error_message")

  // Relations
  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id])

  @@map("workflow_executions")
}

// API Keys (Tenant-Isolated)
model ProviderKey {
  id           String    @id @default(cuid())
  tenantId     String    @map("tenant_id")
  userId       String    @map("user_id")
  provider     String
  keyName      String    @map("key_name")
  encryptedKey String    @map("encrypted_key")
  keyType      String    @default("api_key") @map("key_type")
  isActive     Boolean   @default(true) @map("is_active")
  createdAt    DateTime  @default(now()) @map("created_at")
  lastUsedAt   DateTime? @map("last_used_at")

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id])

  @@map("provider_keys")
}